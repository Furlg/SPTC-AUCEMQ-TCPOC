 // Failed to get sources. Instead, stub sources have been generated by the disassembler.
 // Implementation of methods is unavailable.
package org.springframework.transaction.annotation;
public abstract @interface Transactional {
  
    /**事务的别名 */
  public abstract java.lang.String value() default "";
  
    /**可以自定义transactionManager */
  public abstract java.lang.String transactionManager() default "";
    
    /**没有搞懂 */
  public abstract java.lang.String[] label() default {};
  
    /**
     * 事务的传播行为:如果一个事务调用另一个事务时必须指定事务的传播行为
     *      1:PROPAGATION_REQUIRED:如果当前没有事务则新建一个事务,如果已经存在一个事务则将当前事务加入到已存在的这个事务中
     *      2:PROPAGATION_SUPPORTS:支持当前事务,如果有事务则将此事务加入到当前事务中。如果当前没有事务则以非事务的方式运行。
     *      
     */
  public abstract org.springframework.transaction.annotation.Propagation propagation() default org.springframework.transaction.annotation.Propagation.REQUIRED;
    
    /**
     * 事务的隔离级别:
     *     1:ISOLATION_DEFAULT:使用数据库默认的隔离级别
     *     2:ISOLATION_READ_UNCOMMITTED:事务最低的隔离级别,允许读取尚未提交的更改,可能导致脏读,不可重复读和幻读。
     *     3:ISOLATION_COMMITTED:允许从已经提交的并发事务读取,可防止脏读,但不可重复读和幻读仍可能发生。
     *     4:ISOLATION_REPEATABLE:对相同字段的多次读取结果时一致的.除非读取的数据被当前事务本身改变.可防止脏读和不可重复读但是
     *          幻读仍然可能发生。
     *     5:ISOLATION_SERIALIZABLE:可防止脏读,不可重复读和幻读.这种隔离级别时最慢的,因为她通常是通过完全锁定当前事务所涉及的数据表来完成的。
     */
    <!--
    MYSQL中查看事务的默认隔离级别 show variables like '%tx_isolation%' 
    -->
  public abstract org.springframework.transaction.annotation.Isolation isolation() default org.springframework.transaction.annotation.Isolation.DEFAULT;
  
  public abstract int timeout() default (int) -1;
  
  public abstract java.lang.String timeoutString() default "";
  
  public abstract boolean readOnly() default false;
  
  public abstract  java.lang.Class<? extends java.lang.Throwable>[] rollbackFor() default {};
  
  public abstract java.lang.String[] rollbackForClassName() default {};
  
  public abstract  java.lang.Class<? extends java.lang.Throwable>[] noRollbackFor() default {};
  
  public abstract java.lang.String[] noRollbackForClassName() default {};
}